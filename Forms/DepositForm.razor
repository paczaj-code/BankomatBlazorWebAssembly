

<div class="row">
    <div class="col-12">
        <h3>Wpłata</h3>

        <div class="form-group">
            <label for="name">Podaj ilość banknotów 200zł</label>
            <input type="number" min="0" @bind-value="nominal200" @bind-value:event="oninput"
                   class="form-control mb-3" id="nominal200" />
        </div>
        <div class="form-group">
            <label for="name">Podaj ilość banknotów 100zł</label>
            <input type="number" min="0" @bind-value="nominal100" @bind-value:event="oninput"
                   class="form-control mb-3" id="nominal100" />
        </div>
        <div class="form-group">
            <label for="name">Podaj ilość banknotów 50zł</label>
            <input type="number" min="0" @bind-value="nominal50" @bind-value:event="oninput"
                   class="form-control mb-3" id="nominal50" />
        </div>
        <div class="form-group">
            <label for="name">Podaj ilość banknotów 20zł</label>
            <input type="number" min="0" @bind-value="nominal20" @bind-value:event="oninput"
                   class="form-control" id="nominal20" />
        </div>

    </div>
    <div class="mt-3">
        <hr />
        <h3>
            Zadeklarowana kwota:
            <span class="badge bg-success">
                @CalculateDeclaredAmount().ToString("C0", CultureInfo.CreateSpecificCulture("pl-PL"))
            </span>
        </h3>
    </div>
    <div class="form-group mt-3">
        <button class="btn btn-primary" @onclick="MakeDeposit">Wpłać</button>
        <button class="btn btn-dark" @onclick="ResetForm">Anuluj</button>

    </div>
    @{
        if (isDeclaredValueZero)
        {
            <div class="alert alert-danger mt-3" role="alert">
                Deklarowana kwota wynosi 0!!!!
            </div>
        }
    }
  
</div>

@code {

    private static int nominal200 { get; set; }


    private static int nominal100 { get; set; }


    private int nominal50 { get; set; }


    private int nominal20 { get; set; }

    private decimal declaredAmount;

    private bool isDeclaredValueZero=false;

    private List<Nominal> deposit = new();

    [Parameter]
    public EventCallback<List<Nominal>> SetDeposit { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ResetForm();
    }

    private decimal CalculateDeclaredAmount()
    {
        declaredAmount = (nominal200 * 200) + (nominal100 * 100) + (nominal50 * 50) + (nominal20 * 20);
        return declaredAmount;
    }

    private void ResetForm()
    {
        nominal200 = 0;
        nominal100 = 0;
        nominal50 = 0;
        nominal20 = 0;
        isDeclaredValueZero = false;
    }


    private void MakeDeposit()
    {
        if (nominal200==0 && nominal100==0 && nominal50==0 && nominal20==0)
        {
            isDeclaredValueZero = true;
        }

        else
        {
            isDeclaredValueZero = false;

            deposit = new List<Nominal> {
                new Nominal { NominalValue = 200, NominalAmount = nominal200 },
                new Nominal {NominalValue=100, NominalAmount=nominal100},
                new Nominal {NominalValue=50, NominalAmount=nominal50},
                new Nominal {NominalValue=20, NominalAmount=nominal20}
        };
            SetDeposit.InvokeAsync(deposit);
            ResetForm();
        }
    }

}
